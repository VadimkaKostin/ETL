// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace ETL.DataWarehouse
{
    public partial class ApplicationContext : DbContext
    {
        public ApplicationContext()
        {
        }

        public ApplicationContext(DbContextOptions<ApplicationContext> options)
            : base(options)
        {
        }

        public virtual DbSet<DimAirlines> DimAirlines { get; set; }
        public virtual DbSet<DimAirports> DimAirports { get; set; }
        public virtual DbSet<DimCity> DimCity { get; set; }
        public virtual DbSet<DimDate> DimDate { get; set; }
        public virtual DbSet<DimFlightNumber> DimFlightNumber { get; set; }
        public virtual DbSet<DimState> DimState { get; set; }
        public virtual DbSet<FactDelays> FactDelays { get; set; }
        public virtual DbSet<FactFlights> FactFlights { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<DimAirlines>(entity =>
            {
                entity.HasKey(e => e.AirlineId)
                    .HasName("PK__Dim_Airl__26BE52364328DC88");

                entity.ToTable("Dim_Airlines");

                entity.Property(e => e.AirlineId)
                    .ValueGeneratedNever()
                    .HasColumnName("Airline_Id");

                entity.Property(e => e.Iata)
                    .HasMaxLength(5)
                    .HasColumnName("IATA");

                entity.Property(e => e.Name).HasMaxLength(70);
            });

            modelBuilder.Entity<DimAirports>(entity =>
            {
                entity.HasKey(e => e.AirportId)
                    .HasName("PK__Dim_Airp__3DBD86F324DA9A41");

                entity.ToTable("Dim_Airports");

                entity.Property(e => e.AirportId)
                    .ValueGeneratedNever()
                    .HasColumnName("Airport_Id");

                entity.Property(e => e.CityId).HasColumnName("City_Id");

                entity.Property(e => e.Iata)
                    .HasMaxLength(5)
                    .HasColumnName("IATA");

                entity.Property(e => e.Latitude).HasMaxLength(10);

                entity.Property(e => e.Longitude).HasMaxLength(10);

                entity.Property(e => e.Name).HasMaxLength(150);

                entity.HasOne(d => d.City)
                    .WithMany(p => p.DimAirports)
                    .HasForeignKey(d => d.CityId)
                    .HasConstraintName("FK__Dim_Airpo__City___6383C8BA");
            });

            modelBuilder.Entity<DimCity>(entity =>
            {
                entity.HasKey(e => e.CityId)
                    .HasName("PK__Dim_City__DE9DE000BE57FA4C");

                entity.ToTable("Dim_City");

                entity.Property(e => e.CityId).HasColumnName("City_Id");

                entity.Property(e => e.Name).HasMaxLength(50);

                entity.Property(e => e.StateId).HasColumnName("State_Id");

                entity.HasOne(d => d.State)
                    .WithMany(p => p.DimCity)
                    .HasForeignKey(d => d.StateId)
                    .HasConstraintName("FK__Dim_City__State___60A75C0F");
            });

            modelBuilder.Entity<DimDate>(entity =>
            {
                entity.HasKey(e => e.DateId)
                    .HasName("PK__Dim_Date__1F9B72CB11C19C83");

                entity.ToTable("Dim_Date");

                entity.Property(e => e.DateId).HasColumnName("Date_Id");

                entity.Property(e => e.DayOfWeek).HasColumnName("Day_of_Week");
            });

            modelBuilder.Entity<DimFlightNumber>(entity =>
            {
                entity.HasKey(e => e.FlightNumberId)
                    .HasName("PK__Dim_Flig__BDDA7723E223626D");

                entity.ToTable("Dim_Flight_Number");

                entity.Property(e => e.FlightNumberId).HasColumnName("Flight_Number_Id");

                entity.Property(e => e.FlightNumber).HasColumnName("Flight_Number");
            });

            modelBuilder.Entity<DimState>(entity =>
            {
                entity.HasKey(e => e.StateId)
                    .HasName("PK__Dim_Stat__AF9338F7BCD7286C");

                entity.ToTable("Dim_State");

                entity.Property(e => e.StateId).HasColumnName("State_Id");

                entity.Property(e => e.Country).HasMaxLength(50);

                entity.Property(e => e.Name).HasMaxLength(5);
            });

            modelBuilder.Entity<FactDelays>(entity =>
            {
                entity.ToTable("Fact_Delays");

                entity.Property(e => e.FactDelaysId).HasColumnName("Fact_Delays_Id");

                entity.Property(e => e.ArivalDelay).HasColumnName("Arival_Delay");

                entity.Property(e => e.ArivalTime)
                .HasConversion<TimeOnlyConverter, TimeOnlyComparer>()
                .HasColumnName("Arival_Time");

                entity.Property(e => e.DepartureDelay).HasColumnName("Departure_Delay");

                entity.Property(e => e.DepartureTime)
                .HasConversion<TimeOnlyConverter, TimeOnlyComparer>()
                .HasColumnName("Departure_Time");

                entity.Property(e => e.FactFlightsId).HasColumnName("Fact_Flights_Id");

                entity.Property(e => e.ScheduledArival)
                .HasConversion<TimeOnlyConverter, TimeOnlyComparer>()
                .HasColumnName("Scheduled_Arival");

                entity.Property(e => e.ScheduledDeparture)
                .HasConversion<TimeOnlyConverter, TimeOnlyComparer>()
                .HasColumnName("Scheduled_Departure");

                entity.HasOne(d => d.FactFlights)
                    .WithMany(p => p.FactDelays)
                    .HasForeignKey(d => d.FactFlightsId)
                    .HasConstraintName("FK__Fact_Dela__Fact___7F2BE32F");
            });

            modelBuilder.Entity<FactFlights>(entity =>
            {
                entity.ToTable("Fact_Flights");

                entity.Property(e => e.FactFlightsId)
                    .ValueGeneratedNever()
                    .HasColumnName("Fact_Flights_Id");

                entity.Property(e => e.AirTime).HasColumnName("Air_Time");

                entity.Property(e => e.AirlineId).HasColumnName("Airline_Id");

                entity.Property(e => e.DateId).HasColumnName("Date_Id");

                entity.Property(e => e.DestinationAirportId).HasColumnName("Destination_Airport_Id");

                entity.Property(e => e.FlightNumberId).HasColumnName("Flight_Number_Id");

                entity.Property(e => e.OriginAirportId).HasColumnName("Origin_Airport_Id");

                entity.HasOne(d => d.Airline)
                    .WithMany(p => p.FactFlights)
                    .HasForeignKey(d => d.AirlineId)
                    .HasConstraintName("FK__Fact_Flig__Airli__7A672E12");

                entity.HasOne(d => d.Date)
                    .WithMany(p => p.FactFlights)
                    .HasForeignKey(d => d.DateId)
                    .HasConstraintName("FK__Fact_Flig__Date___787EE5A0");

                entity.HasOne(d => d.DestinationAirport)
                    .WithMany(p => p.FactFlightsDestinationAirport)
                    .HasForeignKey(d => d.DestinationAirportId)
                    .HasConstraintName("FK__Fact_Flig__Desti__7C4F7684");

                entity.HasOne(d => d.FlightNumberNavigation)
                    .WithMany(p => p.FactFlights)
                    .HasForeignKey(d => d.FlightNumberId)
                    .HasConstraintName("FK__Fact_Flig__Fligh__797309D9");

                entity.HasOne(d => d.OriginAirport)
                    .WithMany(p => p.FactFlightsOriginAirport)
                    .HasForeignKey(d => d.OriginAirportId)
                    .HasConstraintName("FK__Fact_Flig__Origi__7B5B524B");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
                optionsBuilder.UseSqlServer("Server=.\\MSSQLSERVERVK;Database=Flights_DataWarehouse;User Id=sa; Password=sa; TrustServerCertificate=True");
            }
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}